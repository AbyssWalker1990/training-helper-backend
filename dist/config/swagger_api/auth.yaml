swagger: "2.0"
info:
  title: My API
  version: 1.0.0
tags:
  - name: Auth
    description: Authentication and user management
components:
  schemas:
    User:
      type: object
      required:
        - user
        - password
      properties:
        user:
          type: string
          description: Username of new or logging in user
        password:
          type: string
          description: Password for registering or logging in user
      example:
        user: YourUsername
        password: 123456abcd
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    description: a message
                    example: New User Abcdef created!!!
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    description: status code
                    example: 400
                  message:
                    type: string
                    description: a message
                    example: Username and password are required
        "409":
          decription: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    description: status code
                    example: 409
                  message:
                    type: string
                    description: a message
                    example: User already exists
        "500":
          description: Server Error
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Authenticate user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User authenticated!"
          schema:
            type: "object"
            properties:
              accessToken:
                type: "string"
                description: "Access Token"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlZvdmEiLCJpYXQiOjE2Nzg4ODQ0NjEsImV4cCI6MTY3ODg4NTY2MX0.DY5dlRiOZxqyMAlLRNzOJNxPlkkIKhOoN6fQJ87CAr4"
        "400":
          description: "Invalid request body"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "a message"
                example: "Username and password are required"
        "401":
          description: "Unauthorized"
  /auth/refresh:
    get:
      tags: [Auth]
      summary: Refresh Access Token
      responses:
        "200":
          description: Get new Access Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: Access Token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IlZvdmEiLCJpYXQiOjE2Nzg4ODQ0NjEsImV4cCI6MTY3ODg4NTY2MX0.DY5dlRiOZxqyMAlLRNzOJNxPlkkIKhOoN6fQJ87CAr4
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
  /auth/logout:
    get:
      tags: [Auth]
      summary: Log out user
      responses:
        "204":
          description: Logged out

